import express from 'express';
import cors from 'cors';
import axios from 'axios';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
dotenv.config({ path: path.join(__dirname, '.env') });

const app = express();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
const API_KEY = process.env.VITE_TMDB_API_KEY;
if (!API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: VITE_TMDB_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –Ω–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept']
}));

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π TMDB
app.get('/api/t/p/*', async (req, res) => {
  try {
    const imagePath = req.path.replace('/api', '');
    const imageUrl = `https://image.tmdb.org${imagePath}`;
    
    console.log('üñºÔ∏è –ü—Ä–æ–∫—Å–∏ –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
    
    const response = await axios({
      method: 'get',
      url: imageUrl,
      responseType: 'stream',
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Accept': 'image/*'
      }
    });
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    res.set('Content-Type', response.headers['content-type']);
    res.set('Cache-Control', 'public, max-age=31536000'); // –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –≥–æ–¥
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    response.data.pipe(res);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
    res.status(404).send('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è TMDB API
app.get('/api/*', async (req, res) => {
  try {
    const tmdbPath = req.path.replace('/api', '');
    const tmdbUrl = `https://api.themoviedb.org/3${tmdbPath}`;
    
    console.log('üîÑ –ü—Ä–æ–∫—Å–∏ –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å:', {
      path: tmdbPath,
      params: req.query
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const response = await axios({
      method: 'get',
      url: tmdbUrl,
      params: req.query,
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç TMDB');
    res.json(response.data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error.message);
    if (axios.isAxiosError(error)) {
      if (error.response) {
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers
        });
        res.status(error.response.status).json({
          error: 'TMDB API Error',
          details: error.response.data
        });
      } else if (error.request) {
        res.status(504).json({
          error: 'Gateway Timeout',
          details: 'TMDB API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
        });
      }
    } else {
      res.status(500).json({
        error: 'Internal Server Error',
        details: error.message
      });
    }
  }
});

const PORT = 3005;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

try {
  app.listen(PORT, () => {
    console.log(`üöÄ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîë API –∫–ª—é—á ${API_KEY ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
  });
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
} 